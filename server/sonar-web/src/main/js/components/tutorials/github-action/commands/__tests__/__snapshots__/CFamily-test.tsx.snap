// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render correctly 1`] = `
<Fragment>
  <DefaultProjectKey
    component={
      Object {
        "breadcrumbs": Array [],
        "key": "my-project",
        "name": "MyProject",
        "qualifier": "TRK",
        "qualityGate": Object {
          "isDefault": true,
          "key": "30",
          "name": "Sonar way",
        },
        "qualityProfiles": Array [
          Object {
            "deleted": false,
            "key": "my-qp",
            "language": "ts",
            "name": "Sonar way",
          },
        ],
        "tags": Array [],
      }
    }
  />
  <li>
    <span>
      onboarding.build.other.os
    </span>
    <RenderOptions
      name="os"
      onCheck={[Function]}
      optionLabelKey="onboarding.build.other.os"
      options={
        Array [
          "linux",
          "win",
          "mac",
        ]
      }
    />
  </li>
</Fragment>
`;

exports[`should render correctly for linux: branches disabled 1`] = `
<Fragment>
  <DefaultProjectKey
    component={
      Object {
        "breadcrumbs": Array [],
        "key": "my-project",
        "name": "MyProject",
        "qualifier": "TRK",
        "qualityGate": Object {
          "isDefault": true,
          "key": "30",
          "name": "Sonar way",
        },
        "qualityProfiles": Array [
          Object {
            "deleted": false,
            "key": "my-qp",
            "language": "ts",
            "name": "Sonar way",
          },
        ],
        "tags": Array [],
      }
    }
  />
  <li>
    <span>
      onboarding.build.other.os
    </span>
    <RenderOptions
      checked="linux"
      name="os"
      onCheck={[Function]}
      optionLabelKey="onboarding.build.other.os"
      options={
        Array [
          "linux",
          "win",
          "mac",
        ]
      }
    />
  </li>
  <CreateYmlFile
    yamlFileName=".github/workflows/build.yml"
    yamlTemplate="name: Build
on:
  push:
    branches:
      - master # or the name of your main branch


jobs:
  build:
    runs-on: <image ready for your build toolchain>
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download and install the build wrapper, build the project
        run: |
          mkdir $HOME/.sonar
          curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip \${{ secrets.SONAR_HOST_URL }}/static/cpp/build-wrapper-linux-x86.zip
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
          $HOME/.sonar/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir bw-output <your clean build command>
        env:
          SONAR_HOST_URL: \${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube analysis
        uses: SonarSource/sonarqube-scan-action@v1.0.0
        with:
          args: -Dsonar.cfamily.build-wrapper-output=bw-output
        env:
          SONAR_TOKEN: \${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: \${{ secrets.SONAR_HOST_URL }}
"
  />
  <CompilationInfo
    className="abs-width-800"
  />
  <FinishButton
    onClick={[MockFunction]}
  />
</Fragment>
`;

exports[`should render correctly for mac: branches enabled 1`] = `
<Fragment>
  <DefaultProjectKey
    component={
      Object {
        "breadcrumbs": Array [],
        "key": "my-project",
        "name": "MyProject",
        "qualifier": "TRK",
        "qualityGate": Object {
          "isDefault": true,
          "key": "30",
          "name": "Sonar way",
        },
        "qualityProfiles": Array [
          Object {
            "deleted": false,
            "key": "my-qp",
            "language": "ts",
            "name": "Sonar way",
          },
        ],
        "tags": Array [],
      }
    }
  />
  <li>
    <span>
      onboarding.build.other.os
    </span>
    <RenderOptions
      checked="mac"
      name="os"
      onCheck={[Function]}
      optionLabelKey="onboarding.build.other.os"
      options={
        Array [
          "linux",
          "win",
          "mac",
        ]
      }
    />
  </li>
  <CreateYmlFile
    yamlFileName=".github/workflows/build.yml"
    yamlTemplate="name: Build
on:
  push:
    branches:
      - master # or the name of your main branch
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: <image ready for your build toolchain>
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download and install the build wrapper
        run: |
          mkdir $HOME/.sonar
          curl -sSLo $HOME/.sonar/build-wrapper-macosx-x86.zip \${{ secrets.SONAR_HOST_URL }}/static/cpp/build-wrapper-macosx-x86.zip
          unzip -o $HOME/.sonar/build-wrapper-macosx-x86.zip -d $HOME/.sonar/
        env:
          SONAR_HOST_URL: \${{ secrets.SONAR_HOST_URL }}

      - name: Download and install the SonarScanner
        run: |
          curl -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-macosx.zip
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/

      - name: Build and analyse the project
        run: |
          # Potential improvement : add these paths to the PATH env var.
          $HOME/.sonar/build-wrapper-macosx-x86/build-wrapper-macosx-x86 --out-dir bw-output <your clean build command>
          $HOME/.sonar/sonar-scanner-4.6.2.2472-macosx/bin/sonar-scanner -Dsonar.cfamily.build-wrapper-output=bw-output
        env:
          SONAR_TOKEN: \${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: \${{ secrets.SONAR_HOST_URL }}
"
  />
  <CompilationInfo
    className="abs-width-800"
  />
  <FinishButton
    onClick={[MockFunction]}
  />
</Fragment>
`;

exports[`should render correctly for win: branches enabled 1`] = `
<Fragment>
  <DefaultProjectKey
    component={
      Object {
        "breadcrumbs": Array [],
        "key": "my-project",
        "name": "MyProject",
        "qualifier": "TRK",
        "qualityGate": Object {
          "isDefault": true,
          "key": "30",
          "name": "Sonar way",
        },
        "qualityProfiles": Array [
          Object {
            "deleted": false,
            "key": "my-qp",
            "language": "ts",
            "name": "Sonar way",
          },
        ],
        "tags": Array [],
      }
    }
  />
  <li>
    <span>
      onboarding.build.other.os
    </span>
    <RenderOptions
      checked="win"
      name="os"
      onCheck={[Function]}
      optionLabelKey="onboarding.build.other.os"
      options={
        Array [
          "linux",
          "win",
          "mac",
        ]
      }
    />
  </li>
  <CreateYmlFile
    yamlFileName=".github/workflows/build.yml"
    yamlTemplate="name: Build
on:
  push:
    branches:
      - master # or the name of your main branch
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: <image ready for your build toolchain>
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download and install the build wrapper
        shell: powershell
        run: |
          $path = \\"$HOME/.sonar/build-wrapper-win-x86.zip\\"
          mkdir $HOME/.sonar
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          (New-Object System.Net.WebClient).DownloadFile(\\"\${{ secrets.SONAR_HOST_URL }}/static/cpp/build-wrapper-win-x86.zip\\", $path)
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::ExtractToDirectory($path, \\"$HOME/.sonar\\")
        env:
          SONAR_HOST_URL: \${{ secrets.SONAR_HOST_URL }}

      - name: Download and install the SonarScanner
        shell: powershell
        run: |
          $path = \\"$HOME/.sonar/sonar-scanner-cli-4.6.2.2472-windows.zip\\"
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          (New-Object System.Net.WebClient).DownloadFile(\\"https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-windows.zip\\", $path)
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::ExtractToDirectory($path, \\"$HOME/.sonar\\")

      - name: Build and analyse the project
        shell: powershell
        run: |
          $env:Path += \\";$HOME/.sonar/build-wrapper-win-x86;$HOME/.sonar/sonar-scanner-4.6.2.2472-windows/bin\\"
          build-wrapper-win-x86-64 --out-dir bw-output <your clean build command>
          sonar-scanner.bat \\"-Dsonar.cfamily.build-wrapper-output=bw-output\\"
        env:
          SONAR_TOKEN: \${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: \${{ secrets.SONAR_HOST_URL }}
"
  />
  <CompilationInfo
    className="abs-width-800"
  />
  <FinishButton
    onClick={[MockFunction]}
  />
</Fragment>
`;
