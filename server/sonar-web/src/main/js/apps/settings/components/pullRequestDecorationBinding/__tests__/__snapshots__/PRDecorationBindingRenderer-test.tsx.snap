// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should display action section correctly when: configuration check is in progress 1`] = `
<div
  className="display-flex-center big-spacer-top action-section"
>
  <Button
    className="spacer-right"
    onClick={[MockFunction]}
  >
    <span
      data-test="project-settings__alm-reset"
    >
      reset_verb
    </span>
  </Button>
  <Button
    disabled={true}
    onClick={[MockFunction]}
  >
    settings.pr_decoration.binding.check_configuration
    <DeferredSpinner
      className="spacer-left"
      loading={true}
    />
  </Button>
</div>
`;

exports[`should display action section correctly when: configuration is saved 1`] = `
<div
  className="display-flex-center big-spacer-top action-section"
>
  <Button
    className="spacer-right"
    onClick={[MockFunction]}
  >
    <span
      data-test="project-settings__alm-reset"
    >
      reset_verb
    </span>
  </Button>
  <Button
    disabled={false}
    onClick={[MockFunction]}
  >
    settings.pr_decoration.binding.check_configuration
    <DeferredSpinner
      className="spacer-left"
      loading={false}
    />
  </Button>
</div>
`;

exports[`should display action section correctly when: form is valid 1`] = `
<div
  className="display-flex-center big-spacer-top action-section"
/>
`;

exports[`should display action section correctly when: update is successfull 1`] = `
<div
  className="display-flex-center big-spacer-top action-section"
>
  <span
    className="text-success spacer-right"
  >
    <AlertSuccessIcon
      className="spacer-right"
    />
    settings.state.saved
  </span>
</div>
`;

exports[`should display action section correctly when: updating 1`] = `
<div
  className="display-flex-center big-spacer-top action-section"
/>
`;

exports[`should render correctly: when loading 1`] = `<DeferredSpinner />`;

exports[`should render correctly: when there are configuration errors (admin user) 1`] = `
<div>
  <header
    className="page-header"
  >
    <h1
      className="page-title"
    >
      settings.pr_decoration.binding.title
    </h1>
  </header>
  <div
    className="markdown small spacer-top big-spacer-bottom"
  >
    settings.pr_decoration.binding.description
  </div>
  <form
    onSubmit={[Function]}
  >
    <MandatoryFieldsExplanation
      className="form-field"
    />
    <div
      className="settings-definition big-spacer-bottom"
    >
      <div
        className="settings-definition-left"
      >
        <label
          className="h3"
          htmlFor="name"
        >
          settings.pr_decoration.binding.form.name
          <MandatoryFieldMarker
            className="spacer-right"
          />
        </label>
        <div
          className="markdown small spacer-top"
        >
          settings.pr_decoration.binding.form.name.help
        </div>
      </div>
      <div
        className="settings-definition-right"
      >
        <Select
          autosize={true}
          className="abs-width-400 big-spacer-top"
          clearable={false}
          id="name"
          menuContainerStyle={
            Object {
              "maxWidth": "210%",
              "width": "auto",
            }
          }
          onChange={[Function]}
          optionRenderer={[Function]}
          options={
            Array [
              Object {
                "alm": "github",
                "key": "i1",
                "url": "http://github.enterprise.com",
              },
              Object {
                "alm": "github",
                "key": "i2",
                "url": "http://github.enterprise.com",
              },
              Object {
                "alm": "bitbucket",
                "key": "i3",
                "url": "http://bbs.enterprise.com",
              },
              Object {
                "alm": "azure",
                "key": "i4",
              },
            ]
          }
          searchable={false}
          value="i1"
          valueKey="key"
          valueRenderer={[Function]}
        />
      </div>
    </div>
    <AlmSpecificForm
      alm="github"
      formData={
        Object {
          "key": "i1",
          "monorepo": false,
          "repository": "account/repo",
        }
      }
      instances={
        Array [
          Object {
            "alm": "github",
            "key": "i1",
            "url": "http://github.enterprise.com",
          },
          Object {
            "alm": "github",
            "key": "i2",
            "url": "http://github.enterprise.com",
          },
          Object {
            "alm": "bitbucket",
            "key": "i3",
            "url": "http://bbs.enterprise.com",
          },
          Object {
            "alm": "azure",
            "key": "i4",
          },
        ]
      }
      monorepoEnabled={false}
      onFieldChange={[MockFunction]}
    />
    <div
      className="display-flex-center big-spacer-top action-section"
    >
      <Button
        className="spacer-right"
        onClick={[MockFunction]}
      >
        <span
          data-test="project-settings__alm-reset"
        >
          reset_verb
        </span>
      </Button>
      <Button
        disabled={false}
        onClick={[MockFunction]}
      >
        settings.pr_decoration.binding.check_configuration
        <DeferredSpinner
          className="spacer-left"
          loading={false}
        />
      </Button>
    </div>
    <Alert
      className="big-spacer-top"
      display="inline"
      variant="error"
    >
      <p
        className="spacer-bottom"
      >
        settings.pr_decoration.binding.check_configuration.failure
      </p>
      <ul
        className="list-styled"
      >
        <li
          key="0"
        >
          Test
        </li>
        <li
          key="1"
        >
          tesT
        </li>
      </ul>
      <p>
        <FormattedMessage
          defaultMessage="settings.pr_decoration.binding.check_configuration.failure.check_global_settings"
          id="settings.pr_decoration.binding.check_configuration.failure.check_global_settings"
          values={
            Object {
              "link": <Link
                onlyActiveOnIndex={false}
                style={Object {}}
                to={
                  Object {
                    "pathname": "/admin/settings",
                    "query": Object {
                      "alm": "github",
                      "category": "almintegration",
                    },
                  }
                }
              >
                settings.pr_decoration.binding.check_configuration.failure.check_global_settings.link
              </Link>,
            }
          }
        />
      </p>
    </Alert>
  </form>
</div>
`;

exports[`should render correctly: when there are configuration errors (admin user) and error are at PROJECT level 1`] = `
<div>
  <header
    className="page-header"
  >
    <h1
      className="page-title"
    >
      settings.pr_decoration.binding.title
    </h1>
  </header>
  <div
    className="markdown small spacer-top big-spacer-bottom"
  >
    settings.pr_decoration.binding.description
  </div>
  <form
    onSubmit={[Function]}
  >
    <MandatoryFieldsExplanation
      className="form-field"
    />
    <div
      className="settings-definition big-spacer-bottom"
    >
      <div
        className="settings-definition-left"
      >
        <label
          className="h3"
          htmlFor="name"
        >
          settings.pr_decoration.binding.form.name
          <MandatoryFieldMarker
            className="spacer-right"
          />
        </label>
        <div
          className="markdown small spacer-top"
        >
          settings.pr_decoration.binding.form.name.help
        </div>
      </div>
      <div
        className="settings-definition-right"
      >
        <Select
          autosize={true}
          className="abs-width-400 big-spacer-top"
          clearable={false}
          id="name"
          menuContainerStyle={
            Object {
              "maxWidth": "210%",
              "width": "auto",
            }
          }
          onChange={[Function]}
          optionRenderer={[Function]}
          options={
            Array [
              Object {
                "alm": "github",
                "key": "i1",
                "url": "http://github.enterprise.com",
              },
              Object {
                "alm": "github",
                "key": "i2",
                "url": "http://github.enterprise.com",
              },
              Object {
                "alm": "bitbucket",
                "key": "i3",
                "url": "http://bbs.enterprise.com",
              },
              Object {
                "alm": "azure",
                "key": "i4",
              },
            ]
          }
          searchable={false}
          value=""
          valueKey="key"
          valueRenderer={[Function]}
        />
      </div>
    </div>
    <div
      className="display-flex-center big-spacer-top action-section"
    >
      <Button
        className="spacer-right"
        onClick={[MockFunction]}
      >
        <span
          data-test="project-settings__alm-reset"
        >
          reset_verb
        </span>
      </Button>
      <Button
        disabled={false}
        onClick={[MockFunction]}
      >
        settings.pr_decoration.binding.check_configuration
        <DeferredSpinner
          className="spacer-left"
          loading={false}
        />
      </Button>
    </div>
    <Alert
      className="big-spacer-top"
      display="inline"
      variant="error"
    >
      <p
        className="spacer-bottom"
      >
        settings.pr_decoration.binding.check_configuration.failure
      </p>
      <ul
        className="list-styled"
      >
        <li
          key="0"
        >
          Test
        </li>
        <li
          key="1"
        >
          tesT
        </li>
      </ul>
    </Alert>
  </form>
</div>
`;

exports[`should render correctly: when there are configuration errors (non-admin user) 1`] = `
<div>
  <header
    className="page-header"
  >
    <h1
      className="page-title"
    >
      settings.pr_decoration.binding.title
    </h1>
  </header>
  <div
    className="markdown small spacer-top big-spacer-bottom"
  >
    settings.pr_decoration.binding.description
  </div>
  <form
    onSubmit={[Function]}
  >
    <MandatoryFieldsExplanation
      className="form-field"
    />
    <div
      className="settings-definition big-spacer-bottom"
    >
      <div
        className="settings-definition-left"
      >
        <label
          className="h3"
          htmlFor="name"
        >
          settings.pr_decoration.binding.form.name
          <MandatoryFieldMarker
            className="spacer-right"
          />
        </label>
        <div
          className="markdown small spacer-top"
        >
          settings.pr_decoration.binding.form.name.help
        </div>
      </div>
      <div
        className="settings-definition-right"
      >
        <Select
          autosize={true}
          className="abs-width-400 big-spacer-top"
          clearable={false}
          id="name"
          menuContainerStyle={
            Object {
              "maxWidth": "210%",
              "width": "auto",
            }
          }
          onChange={[Function]}
          optionRenderer={[Function]}
          options={
            Array [
              Object {
                "alm": "github",
                "key": "i1",
                "url": "http://github.enterprise.com",
              },
              Object {
                "alm": "github",
                "key": "i2",
                "url": "http://github.enterprise.com",
              },
              Object {
                "alm": "bitbucket",
                "key": "i3",
                "url": "http://bbs.enterprise.com",
              },
              Object {
                "alm": "azure",
                "key": "i4",
              },
            ]
          }
          searchable={false}
          value=""
          valueKey="key"
          valueRenderer={[Function]}
        />
      </div>
    </div>
    <div
      className="display-flex-center big-spacer-top action-section"
    >
      <Button
        className="spacer-right"
        onClick={[MockFunction]}
      >
        <span
          data-test="project-settings__alm-reset"
        >
          reset_verb
        </span>
      </Button>
      <Button
        disabled={false}
        onClick={[MockFunction]}
      >
        settings.pr_decoration.binding.check_configuration
        <DeferredSpinner
          className="spacer-left"
          loading={false}
        />
      </Button>
    </div>
    <Alert
      className="big-spacer-top"
      display="inline"
      variant="error"
    >
      <p
        className="spacer-bottom"
      >
        settings.pr_decoration.binding.check_configuration.failure
      </p>
      <ul
        className="list-styled"
      >
        <li
          key="0"
        >
          Test
        </li>
        <li
          key="1"
        >
          tesT
        </li>
      </ul>
      <p>
        settings.pr_decoration.binding.check_configuration.contact_admin
      </p>
    </Alert>
  </form>
</div>
`;

exports[`should render correctly: with a single ALM instance 1`] = `
<div>
  <header
    className="page-header"
  >
    <h1
      className="page-title"
    >
      settings.pr_decoration.binding.title
    </h1>
  </header>
  <div
    className="markdown small spacer-top big-spacer-bottom"
  >
    settings.pr_decoration.binding.description
  </div>
  <form
    onSubmit={[Function]}
  >
    <MandatoryFieldsExplanation
      className="form-field"
    />
    <div
      className="settings-definition big-spacer-bottom"
    >
      <div
        className="settings-definition-left"
      >
        <label
          className="h3"
          htmlFor="name"
        >
          settings.pr_decoration.binding.form.name
          <MandatoryFieldMarker
            className="spacer-right"
          />
        </label>
        <div
          className="markdown small spacer-top"
        >
          settings.pr_decoration.binding.form.name.help
        </div>
      </div>
      <div
        className="settings-definition-right"
      >
        <Select
          autosize={true}
          className="abs-width-400 big-spacer-top"
          clearable={false}
          id="name"
          menuContainerStyle={
            Object {
              "maxWidth": "210%",
              "width": "auto",
            }
          }
          onChange={[Function]}
          optionRenderer={[Function]}
          options={
            Array [
              Object {
                "alm": "github",
                "key": "i1",
                "url": "http://github.enterprise.com",
              },
            ]
          }
          searchable={false}
          value=""
          valueKey="key"
          valueRenderer={[Function]}
        />
      </div>
    </div>
    <div
      className="display-flex-center big-spacer-top action-section"
    />
  </form>
</div>
`;

exports[`should render correctly: with a valid and saved form 1`] = `
<div>
  <header
    className="page-header"
  >
    <h1
      className="page-title"
    >
      settings.pr_decoration.binding.title
    </h1>
  </header>
  <div
    className="markdown small spacer-top big-spacer-bottom"
  >
    settings.pr_decoration.binding.description
  </div>
  <form
    onSubmit={[Function]}
  >
    <MandatoryFieldsExplanation
      className="form-field"
    />
    <div
      className="settings-definition big-spacer-bottom"
    >
      <div
        className="settings-definition-left"
      >
        <label
          className="h3"
          htmlFor="name"
        >
          settings.pr_decoration.binding.form.name
          <MandatoryFieldMarker
            className="spacer-right"
          />
        </label>
        <div
          className="markdown small spacer-top"
        >
          settings.pr_decoration.binding.form.name.help
        </div>
      </div>
      <div
        className="settings-definition-right"
      >
        <Select
          autosize={true}
          className="abs-width-400 big-spacer-top"
          clearable={false}
          id="name"
          menuContainerStyle={
            Object {
              "maxWidth": "210%",
              "width": "auto",
            }
          }
          onChange={[Function]}
          optionRenderer={[Function]}
          options={
            Array [
              Object {
                "alm": "github",
                "key": "i1",
                "url": "http://github.enterprise.com",
              },
              Object {
                "alm": "github",
                "key": "i2",
                "url": "http://github.enterprise.com",
              },
              Object {
                "alm": "bitbucket",
                "key": "i3",
                "url": "http://bbs.enterprise.com",
              },
              Object {
                "alm": "azure",
                "key": "i4",
              },
            ]
          }
          searchable={false}
          value="i1"
          valueKey="key"
          valueRenderer={[Function]}
        />
      </div>
    </div>
    <AlmSpecificForm
      alm="github"
      formData={
        Object {
          "key": "i1",
          "monorepo": false,
          "repository": "account/repo",
        }
      }
      instances={
        Array [
          Object {
            "alm": "github",
            "key": "i1",
            "url": "http://github.enterprise.com",
          },
          Object {
            "alm": "github",
            "key": "i2",
            "url": "http://github.enterprise.com",
          },
          Object {
            "alm": "bitbucket",
            "key": "i3",
            "url": "http://bbs.enterprise.com",
          },
          Object {
            "alm": "azure",
            "key": "i4",
          },
        ]
      }
      monorepoEnabled={false}
      onFieldChange={[MockFunction]}
    />
    <div
      className="display-flex-center big-spacer-top action-section"
    >
      <Button
        className="spacer-right"
        onClick={[MockFunction]}
      >
        <span
          data-test="project-settings__alm-reset"
        >
          reset_verb
        </span>
      </Button>
      <Button
        disabled={false}
        onClick={[MockFunction]}
      >
        settings.pr_decoration.binding.check_configuration
        <DeferredSpinner
          className="spacer-left"
          loading={false}
        />
      </Button>
    </div>
    <Alert
      className="big-spacer-top"
      display="inline"
      variant="success"
    >
      settings.pr_decoration.binding.check_configuration.success
    </Alert>
  </form>
</div>
`;

exports[`should render correctly: with an empty form 1`] = `
<div>
  <header
    className="page-header"
  >
    <h1
      className="page-title"
    >
      settings.pr_decoration.binding.title
    </h1>
  </header>
  <div
    className="markdown small spacer-top big-spacer-bottom"
  >
    settings.pr_decoration.binding.description
  </div>
  <form
    onSubmit={[Function]}
  >
    <MandatoryFieldsExplanation
      className="form-field"
    />
    <div
      className="settings-definition big-spacer-bottom"
    >
      <div
        className="settings-definition-left"
      >
        <label
          className="h3"
          htmlFor="name"
        >
          settings.pr_decoration.binding.form.name
          <MandatoryFieldMarker
            className="spacer-right"
          />
        </label>
        <div
          className="markdown small spacer-top"
        >
          settings.pr_decoration.binding.form.name.help
        </div>
      </div>
      <div
        className="settings-definition-right"
      >
        <Select
          autosize={true}
          className="abs-width-400 big-spacer-top"
          clearable={false}
          id="name"
          menuContainerStyle={
            Object {
              "maxWidth": "210%",
              "width": "auto",
            }
          }
          onChange={[Function]}
          optionRenderer={[Function]}
          options={
            Array [
              Object {
                "alm": "github",
                "key": "i1",
                "url": "http://github.enterprise.com",
              },
              Object {
                "alm": "github",
                "key": "i2",
                "url": "http://github.enterprise.com",
              },
              Object {
                "alm": "bitbucket",
                "key": "i3",
                "url": "http://bbs.enterprise.com",
              },
              Object {
                "alm": "azure",
                "key": "i4",
              },
            ]
          }
          searchable={false}
          value=""
          valueKey="key"
          valueRenderer={[Function]}
        />
      </div>
    </div>
    <div
      className="display-flex-center big-spacer-top action-section"
    />
  </form>
</div>
`;

exports[`should render correctly: with no ALM instances (admin user) 1`] = `
<div>
  <Alert
    className="spacer-top huge-spacer-bottom"
    variant="info"
  >
    <FormattedMessage
      defaultMessage="settings.pr_decoration.binding.no_bindings.admin"
      id="settings.pr_decoration.binding.no_bindings.admin"
      values={
        Object {
          "link": <Link
            onlyActiveOnIndex={false}
            style={Object {}}
            to={
              Object {
                "pathname": "/admin/settings",
                "query": Object {
                  "category": "almintegration",
                },
              }
            }
          >
            settings.pr_decoration.binding.no_bindings.link
          </Link>,
        }
      }
    />
  </Alert>
</div>
`;

exports[`should render correctly: with no ALM instances (non-admin user) 1`] = `
<div>
  <Alert
    className="spacer-top huge-spacer-bottom"
    variant="info"
  >
    settings.pr_decoration.binding.no_bindings
  </Alert>
</div>
`;

exports[`should render select options correctly 1`] = `
<React.Fragment>
  <span>
    i1
     — 
  </span>
  <span
    className="text-muted"
  >
    http://github.enterprise.com
  </span>
</React.Fragment>
`;

exports[`should render select options correctly 2`] = `
<React.Fragment>
  <span>
    i2
     — 
  </span>
  <span
    className="text-muted"
  >
    http://github.enterprise.com
  </span>
</React.Fragment>
`;
